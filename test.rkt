#lang racket
(require "resources.rkt")
(require rackunit)
(require "sudoku.rkt")


(define lst '(1 2 3 4 0 6 7 8 9))
(check-equal? (is-in-list 5 lst) #f)
(check-equal? (is-in-list 4 lst) #t)
(check-equal? (get-positions 4) '(3 4 5))
(check-equal? (get-square 8 8 test4) '(6 0 0 0 4 0 8 0 1))
(check-equal? (get-square 4 0 test3) '(4 0 0 8 7 0 0 0 3))
(check-equal? (is-valid 4 4 4 test3) #t)
(check-equal? (is-valid 2 8 3 test3) #f)
(check-equal? (is-valid 4 2 7 test4) #f)
(check-equal? (my-nth 8 lst) 9)
(check-equal? (my-nth 0 lst) 1)
(check-equal? (get-element 4 4 test3) 2)
(check-equal? (get-element 1 7 test3) 3)
(check-equal? (replace-at-pos 5 7 lst) '(1 2 3 4 0 7 7 8 9))
(check-equal? (replace-at-pos 0 7 lst) '(7 2 3 4 0 6 7 8 9))
(check-equal? (insert-in 7 6 9 test3) '((0 3 0 0 0 0 0 0 1)
                                        (9 0 7 0 8 0 0 3 0)
                                        (0 8 0 2 0 4 6 0 0)
                                        (4 0 0 6 0 7 3 1 0)
                                        (8 7 0 0 2 0 0 0 9)
                                        (0 0 3 1 0 0 0 4 2)
                                        (0 1 0 0 0 0 0 8 0)
                                        (5 0 2 0 6 0 9 7 0)
                                        (0 0 0 3 0 5 4 0 6)))
(check-equal? (insert-in 0 0 9 test3) '((9 3 0 0 0 0 0 0 1)
                                        (9 0 7 0 8 0 0 3 0)
                                        (0 8 0 2 0 4 6 0 0)
                                        (4 0 0 6 0 7 3 1 0)
                                        (8 7 0 0 2 0 0 0 9)
                                        (0 0 3 1 0 0 0 4 2)
                                        (0 1 0 0 0 0 0 8 0)
                                        (5 0 2 0 6 0 0 7 0)
                                        (0 0 0 3 0 5 4 0 6)))
(check-equal? (get-row 8 test3) '(0 0 0 3 0 5 4 0 6))
(check-equal? (get-row 4 test3) '(8 7 0 0 2 0 0 0 9))
(check-equal? (get-col 8 test3) '(1 0 0 0 9 2 0 0 6))
(check-equal? (get-col 0 test3) '(0 9 0 4 8 0 0 5 0))
(check-equal? (check-duplicate 0 0 test1) #f)
(check-equal? (check-duplicate 0 0 test2) #t)
(check-equal? (check-duplicate 0 0 test3) #f)
(check-equal? (check-duplicate 0 0 test4) #f)
(check-equal? (check-duplicate 0 0 test4-res) #f)
(check-equal? (check-size 0 test3) #f)
(check-equal? (check-size 0 test6) #t)
(check-equal? (check-size 0 test7) #t)
(check-equal? (get-solution test2) -1)
(check-equal? (get-solution test6) -2)
(check-equal? (get-solution test7) -2)
