#lang racket
(require "resources.rkt")
(require rackunit)
(require "sudoku.rkt")


(define lst '(1 2 3 4 0 6 7 8 9))
(check-equal? (is-in-list 5 lst) #f)
(check-equal? (is-in-list 4 lst) #t)
(check-equal? (create-help-list-caller 1) '((0)))
(check-equal? (create-help-list-caller 4) '((0 1) (2 3)))
(check-equal? (create-help-list-caller 9) '((0 1 2) (3 4 5) (6 7 8)))
(check-equal? (create-help-list-caller 16) '((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15)))
(check-equal? (create-help-list-caller 25) '((0 1 2 3 4) (5 6 7 8 9) (10 11 12 13 14) (15 16 17 18 19) (20 21 22 23 24)))
(check-equal? (get-square 8 8 (create-help-list-caller 9) test4) '(6 0 0 0 4 0 8 0 1))
(check-equal? (get-square 4 0 (create-help-list-caller 9) test3) '(4 0 0 8 7 0 0 0 3))
(check-equal? (get-square 4 0 (create-help-list-caller 16) test12) '(0 15 11 10 12 13 0 0 5 0 6 1 0 2 0 0))
(check-equal? (is-valid 4 (get-row 1 test3) (get-col 1 test3) (get-square 1 1 (create-help-list-caller 9) test3)) #t)
(check-equal? (is-valid 9 (get-row 1 test3) (get-col 1 test3) (get-square 1 1 (create-help-list-caller 9) test3)) #f)
(check-equal? (my-nth 8 lst) 9)
(check-equal? (my-nth 0 lst) 1)
(check-equal? (get-element 4 4 test3) 2)
(check-equal? (get-element 1 7 test3) 3)
(check-equal? (replace-at-pos 5 7 lst) '(1 2 3 4 0 7 7 8 9))
(check-equal? (replace-at-pos 0 7 lst) '(7 2 3 4 0 6 7 8 9))
(check-equal? (insert-in 7 6 9 test3) '((0 3 0 0 0 0 0 0 1)
                                        (9 0 7 0 8 0 0 3 0)
                                        (0 8 0 2 0 4 6 0 0)
                                        (4 0 0 6 0 7 3 1 0)
                                        (8 7 0 0 2 0 0 0 9)
                                        (0 0 3 1 0 0 0 4 2)
                                        (0 1 0 0 0 0 0 8 0)
                                        (5 0 2 0 6 0 9 7 0)
                                        (0 0 0 3 0 5 4 0 6)))
(check-equal? (insert-in 0 0 9 test3) '((9 3 0 0 0 0 0 0 1)
                                        (9 0 7 0 8 0 0 3 0)
                                        (0 8 0 2 0 4 6 0 0)
                                        (4 0 0 6 0 7 3 1 0)
                                        (8 7 0 0 2 0 0 0 9)
                                        (0 0 3 1 0 0 0 4 2)
                                        (0 1 0 0 0 0 0 8 0)
                                        (5 0 2 0 6 0 0 7 0)
                                        (0 0 0 3 0 5 4 0 6)))
(check-equal? (insert-in 2 1 16 test12) '((0 6 0 0 0 0 0 8 11 0 0 15 14 0 0 16)
                                          (15 11 0 0 0 16 14 0 0 0 12 0 0 6 0 0)
                                          (13 16 9 12 0 0 0 0 3 16 14 0 15 11 10 0)
                                          (2 0 16 0 11 0 15 10 1 0 0 0 0 0 0 0)
                                          (0 15 11 10 0 0 16 2 13 8 9 12 0 0 0 0)
                                          (12 13 0 0 4 1 5 6 2 3 0 0 0 0 11 10)
                                          (5 0 6 1 12 0 9 0 15 11 10 7 16 0 0 3)
                                          (0 2 0 0 0 10 0 11 6 0 5 0 0 13 0 9)
                                          (10 7 15 11 16 0 0 0 12 13 0 0 0 0 0 6)
                                          (9 0 0 0 0 0 1 0 0 2 0 16 10 0 0 11)
                                          (1 0 4 6 9 13 0 0 7 0 11 0 3 16 0 0)
                                          (16 14 0 0 7 0 10 15 4 6 1 0 0 0 13 8)
                                          (11 10 0 15 0 0 0 16 9 12 13 0 0 1 5 4)
                                          (0 0 12 0 1 4 6 0 16 0 0 0 11 10 0 0)
                                          (0 0 5 0 8 12 13 0 10 0 0 11 2 0 0 14)
                                          (3 16 0 0 10 0 0 7 0 0 6 0 0 0 12 0)))
(check-equal? (get-row 8 test3) '(0 0 0 3 0 5 4 0 6))
(check-equal? (get-row 4 test3) '(8 7 0 0 2 0 0 0 9))
(check-equal? (get-col 8 test3) '(1 0 0 0 9 2 0 0 6))
(check-equal? (get-col 0 test3) '(0 9 0 4 8 0 0 5 0))
(check-equal? (check-correctness 0 0 9 (create-help-list-caller 9) test1) #f)
(check-equal? (check-correctness 0 0 9 (create-help-list-caller 9) test2) #t)
(check-equal? (check-correctness 0 0 9 (create-help-list-caller 9) test3) #f)
(check-equal? (check-correctness 0 0 9 (create-help-list-caller 9) test4) #f)
(check-equal? (check-correctness 0 0 (length (car test11)) (create-help-list-caller 16) test11) #f)
(check-equal? (check-size 0 9 test3) #f)
(check-equal? (check-size 0 9 test6) #t)
(check-equal? (check-size 0 9 test7) #t)
(check-equal? (check-size 0 (length (car test11)) test11) #f)
(check-equal? (get-solution test2) -1)
(check-equal? (get-solution test14) -1)
(check-equal? (get-solution test6) -2)
(check-equal? (get-solution test7) -2)
